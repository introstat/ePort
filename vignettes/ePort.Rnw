\documentclass{article}
\setlength{\parindent}{0pt} % Remove indent at new paragraphs
\setcounter{secnumdepth}{0}  % Remove section numbering at certain depth
\usepackage[round,sort]{natbib}
\usepackage{fixltx2e}
\usepackage{graphicx}	% For external pictures
\usepackage{float}
\usepackage{subfig}	% Add subfigures within figures
\usepackage{verbatim}
\usepackage[colorlinks=true,linkcolor=blue,citecolor=blue,urlcolor=blue]{hyperref}
\usepackage{amssymb,amsbsy,amsmath}
\usepackage{epsfig}
\usepackage[left=3cm,top=3cm,bottom=3.5cm,right=3cm]{geometry} % For easy document margins
\usepackage{fancyhdr} % For customization of header/footer
\usepackage{adjustbox}
\numberwithin{equation}{section} % Equation numbers relative to sections

% ---------------------------------------------------------------------------------------------------------------------------------------

% \VignetteIndexEntry{ePort: Student performance report generation for statistics instructors}
%\VignettePackage{ePort}
%\documentclass{amsart}
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\pkg}[1]{{\texttt{#1}}}
\newcommand{\class}[1]{{\textit{#1}}}
\newcommand{\R}{{\normalfont\textsf{R }}{}}

\begin{document}
\sloppy

<<include=FALSE>>=
library(knitr)
opts_chunk$set(
concordance=TRUE
)
@


% <<label=R options,echo=FALSE>>=
% options(width = 60)
% options(SweaveHooks = list(fig = function() par(mar=c(3,3,1,0.5),mgp = c(2,1,0))))
% @

%\SweaveOpts{prefix.string=fig,include=F,keep.source=T,eps=FALSE}

% <<echo=false>>=
% options(continue="  ")
% @
% %@% TO ELIMINATE THE "+" IN CONSECUTIVE SCRIPT LINES

\title{Vignette for the ePort package:\\ Academic report generation for statistics instructors}
\author{Xiaoyue Cheng, Di Cook, Lindsay Rutter, Amy Froelich}
\date{\pkg{ePort} version \Sexpr{packageDescription("ePort")[["Version"]]} , \Sexpr{Sys.Date()} }
\maketitle

\tableofcontents
\setcounter{footnote}{1} \footnotetext{This \LaTeX\ vignette document is created using the \R function \code{Sweave} on the \R package \pkg{ePort}. It is automatically downloaded with the package and can be accessed with the \R command \code{vignette("ePort")}.}  \newpage
\setlength{\parskip}{10pt} % Inter-paragraph spacing

<<echo=FALSE>>=
rm(list=ls())
library(knitr)
@ 

\section{Summary}

The \pkg{ePort} package provides tools for course instructors to generate electronic reports regarding student performance. Instructors can produce reports immediately after homework assignment deadlines, and use them to better understand student performance throughout the teaching semester. The goal is to allow instructors to assess and improve upon their teaching approaches in a fast response cycle.

The tools in this package will be especially beneficial for users who supervise large introductory courses. These courses often consist of multiple topics (groups of learning outcomes) that are taught by multiple instructors across multiple sections (groups of students). To accomodate the various ways that student performance can be examined for such courses, the package can generate various reports that can compare within and between topics and sections.

At its simplest, a report can be generated for one topic and one section. This would allow course coordinators to determine how well a particular section performed on a particular topic.

Reports can also be generated for one topic across multiple sections, with output format that allows course coordinators to quickly determine how well and consistently the multiple sections performed on a particular topic. This could be particularly insightful in cases where discrepancies in student performance are discovered between sections, especially if different instructors and/or teaching methods are being used across the sections.

In addition, reports can be generated for one unit (group of topics), either within one section or between multiple sections. This allows coordinators to assess student performance across all the learning outcomes of the combined topics that form the unit, and to quantify the consistency of how students perform across sections.

Both short and long versions of reports can be generated for any of the aforementioned scenarios. Short versions of reports provide brief summarizations of student performance without regard to individual problems, whereas long versions of reports provide detailed summarizations of student performance for each problem in the assignment. Hence, reports can also be used to confirm the suitability of assigned problems. For instance, in some courses, problems that assess the same learning outcome and are intended to be of equal difficulty levels are grouped into a problem set, and each student is assigned a random subset from this set of problems. However, sometimes there may be an unexpected discrepancy in student performance between problems in a given problem set, indicating an unintended discrepancy in the clearness or difficulty level of the problems to which students are randomly assigned. This package will allow users to efficiently find and fix such issues. 

\bigskip

\section{Introduction}

\subsection{Installation}

\R is a open source software project for statistical computing, and can be freely downloaded from the Comprehensive R Archive Network (CRAN) website. The link to contributed documentation on the CRAN website offers practical resources for an introduction to \R, in several languages. After downloading and installing \R, the installation of additional packages is straightforward. To install the \pkg{ePort} package from \R, use the command:

<<results='hide', eval=FALSE>>=
install.packages("ePort")
@

\noindent
The \pkg{ePort} package should now be successfully installed. Next, to render it accessible to the current \R session, simply type:

<<results='hide'>>=
library(ePort)
@

\subsection{Help Files}

To access help pages with example syntax and documentation for the available functions of the \pkg{ePort} package, please type:

<<eval=FALSE>>=
help(package="ePort")
@ 

To access more detailed information about a specific function in the \pkg{ePort} package, use the following help command on that function, such as:

<<eval=FALSE>>=
help(mergeSection)
@ 

The above command will return the help file for the function. Notice that this help file includes freestanding example syntax to illustrate how function commands are executed. This is the case in help files for most functions. The provided example code can be pasted directly into an \R session.

\subsection{Example Data}

A directory that contains example data is automatically installed with the ePort package. The name of this directory is \texttt{extdata}. Understanding the location, layout, and content of the \texttt{extdata} directory will be necessary to continue with the examples provided in the vignette.

The absolute pathway to the \texttt{extdata} directory on your local computer can be determined by typing the following command into the R console:

<<>>=
system.file("inst/extdata/", package="ePort")
@

* Add in picture with layout of the example data file  
* Describe necessary format of each type of example data file  
* Warn that real data should not be added to this example data file.
To view this file, simply open it in a Web Brower (Mozilla Firefox, Google Chrome, Microsoft Internet Explorer, Apple Safari).  

\section{Generating Reports}

The \pkg{ePort} package offers several functions that result in useful reports. Below is a brief introduction to some of the available functions.

\subsection{One section one topic}

\subsubsection{Short version}

We start by demonstrating how to generate the electronic report for one section one topic. This demonstration will use the example input files provided in the previously-described \texttt{extdata} directory, and will output the report to the \texttt{ReportFiles} subdirectory of the \texttt{extdata} directory. If you have not modified anything in the \texttt{extdata} directory, then the \texttt{ReportFiles} subdirectory should be empty, as we have not generated any example reports yet.

In this demonstration, we will create a report for \texttt{Topic 06} and \texttt{Section AB}. Like any individual report, we will require three input files: an answer key file, a data file, and a learning outcome file. There should be two example answer key files in the subdirectory \texttt{KeyFiles} (\texttt{Topic06.Questions.htm} and \texttt{Topic03.Questions.htm}) and we will use the \texttt{Topic06.Questions.htm} file. Additionally, there should be four example data files in the subdirectory \texttt{DataFiles} (\texttt{Topic03.AB.csv}, \texttt{Topic03.CD.csv}, \texttt{Topic06.AB.csv}, and \texttt{Topic06.CD.csv}), and we will use the \texttt{Topic06.AB.csv} file. Lastly, there should be two example learning outcome files in the subdirectory \texttt{OutcomeFiles} (\texttt{Topic03.Outcomes.txt} and \texttt{Topic06.Outcomes.txt}), and we will use the \texttt{Topic06.Outcomes.txt} file.

The block of code we will use to generate our \texttt{Topic 06} \texttt{Section AB} is as follows:

<<eval=FALSE,tidy=FALSE>>=
key_htm = system.file("inst/extdata/KeyFiles/Topic06.Questions.htm", package="ePort")

refineKey(key_htm)

keyPath = gsub("htm$","txt",key_htm)

dataPath = system.file("inst/extdata/DataFiles/Topic06/Topic06.AB.csv", package="ePort")

rewriteData(dataPath)

loPath = system.file("inst/extdata/OutcomeFiles/Topic06.Outcomes.txt", package="ePort")

outPath = system.file("inst/extdata/ReportFiles", package="ePort")

makeReport(keyFile=keyPath, dataFile=dataPath, loFile=loPath, outFile=outPath)
@

We now briefly explain each step of the process. First, we must save the absolute pathway of this answer key. Here, we save it to a string variable called \texttt{key\_htm}.

<<eval=FALSE>>=
key_htm = system.file("inst/extdata/KeyFiles/Topic06.Questions.htm", package="ePort")
@

Second, we must parse and clean this .htm answer key file, and convert it to plain text format. We do this by calling the \texttt{refine\_key()} function of \texttt{ePort} on the .htm answer key file. By running the line below, we will create the cleaned .txt file:

<<eval=FALSE>>=
refineKey(key_htm)
@

By default, the \texttt{refine\_key()} function will place the cleaned .txt file into the same directory as the original .html file, and with the same name. Hence, if the  you navigate to the \texttt{extdata} directory and its \texttt{KeyFiles} subdirectory, you should now see the new and clean .txt file we just created, \texttt{Topic06.Questions.txt}.

Our third step is to save the absolute pathway of this new and cleaned .txt answer key. Below, we save it to a string variable called \texttt{keypath}.

<<eval=FALSE>>=
keyPath = gsub("htm$","txt",key_htm)
@

Now that we have the absolute path of our cleaned .txt answer key, our fourth step is to define the absolute pathway of our data file. We save this to a variable called \texttt{dataPath}.

<<eval=FALSE>>=
dataPath = system.file("inst/extdata/DataFiles/Topic06/Topic06.AB.csv", package="ePort")
@

After this, our fifth step is to prime the data file to be compatible with our next steps of generating the reports. We do this by running the \texttt{rewrite\_data()} function of ePort on the data file. This function changes certain non-meaningful character issues that would otherwise cause a problem when running the reports. For more details about the specific process, please run a help command on the function. Below, we rewrite the data file:

<<eval=FALSE>>=
rewriteData(dataPath)
@

Our sixth step is to save the absolute path of our learning outcome file. Below, we save this to a variable called \texttt{loPath}.

<<eval=FALSE>>=
loPath = system.file("inst/extdata/OutcomeFiles/Topic06.Outcomes.txt", package="ePort")
@

After that, the seventh step is to specify our desired output directory. This is the absolute path of where the reports should be saved. Below, we create a variable called \texttt{outPath} to specify that we want to output our report to the \texttt{ReportFiles} subdirectory.

<<eval=FALSE>>=
outPath = system.file("inst/extdata/ReportFiles", package="ePort")
@

Now that we have primed our three input files (cleaned answer key, data file, and learning outcomes file) and specified our output directory, our last step is to generate the report using the \texttt{makeReport()} function.

<<eval=FALSE>>=
makeReport(keyFile=keyPath, dataFile=dataPath, loFile=loPath, outFile=outPath)
@

\textit{Upon running this code, you will receive the following message and menu asking for your input:}

Please enter integer (1-6) corresponding to desired report type below.

Note: If running many reports, it is more efficient to exit now and hard-code the reportType parameter. See help(makeReport). 

1: One section one topic short version (secTopicShort)
2: One section one topic long version (secTopicLong)
3: Multiple sections one topic short version (crossSecTopicShort)
4: Multiple sections one topic short version (crossSecTopicLong)
5: One section one unit (secUnit)
6: Multiple sections one unit (crossSecUnit)

Now that we have successfully run the report generation, we can find our report in the \texttt{ReportFiles} subdirectory of the \texttt{extdata} example directory. Indeed, we see that we have our short report (\texttt{Stat101hwkTopic06ABshort.pdf}) of one topic (\texttt{Topic 06}) and one section (\texttt{Section AB}).

%%% Add more here
And a .txt file that contains the list of students who have scored below 80 on this assignment {Topic06ABstudentsbelow80.txt}.

\subsubsection{Long version}

The short report summarization we created for one section one topic (\texttt{Stat101hwkTopic06ABshort.pdf}) may be helpful for users who want to view a brief and overall summarization of student performance. However, we can also generate a more verbose report summarization for one section one topic that would include additional details, such as separate analysis for each problem in the assignment. We have already defined our three input file pathways and one output file pathway. Hence, if we wish to generate this longer version of the report summarization for one section one topic, all we need to rerun is the \texttt{makeReport()} function, this type specifying the \texttt{reportType} parameter as such%%%%

<<eval=FALSE>>=
makeReport(keyFile=keyPath,dataFile=dataPath,loFile=loPath,reportType="secTopicLong",outFile=outPath)
@

We can find our output report in the \texttt{ReportFiles} subdirectory of the \texttt{extdata} example directory. Indeed, we see that we now have a much longer report (\texttt{Stat101hwkTopic06ABlong.pdf}) of one topic (\texttt{Topic 06}) and one section (\texttt{Section AB}).

\subsubsection{Running on batch of sections}

If a course has multiple sections, and we wish to create an individual report for each of the many sections, then one inconvenient way to accomplish this would be to run the example code above, separately for each section at a time, with new data files each time. However, a more convenient way to accomplish the task would be to run all the reports at once. We are still using the same key and learning outcome files, although we would now need two data files (one with the answers from students in \texttt{Section AB} and one with the answers from students in \texttt{Section CD}).

We can hard code the two data files needed for the two sections into a vector called \texttt{dataListPath} as shown below:

<<eval=FALSE>>=
dataListPath = c(system.file("inst/extdata/DataFiles/Topic06/Topic06.AB.csv", package="ePort"), system.file("inst/extdata/DataFiles/Topic06/Topic06.CD.csv", package="ePort"))
@

Then, we can run the 

<<eval=FALSE>>=
for (i in dataListPath) rewriteData(i)
for (i in dataListPath){
  makeReport(keyFile=keyPath,dataFile=i,loFile=loPath,outFile=outPath)
  #makeReport(keyFile=keyPath,dataFile=i,loFile=loPath,reportType="secTopicLong",outFile=outPath)
}
@

We can also, however, simply 

<<eval=FALSE>>=
dataFolder = system.file("inst/extdata/DataFiles/Topic06/", package="ePort")
#namelist = list.files(path=dataFolder, pattern = "^[^.]*\.[^.]*\.[^.]*$", full.names=FALSE)
#http://stackoverflow.com/questions/9949176/match-string-with-exactly-2-of-a-given-character-e-g-2-literal-periods


dataListPath = c(system.file("inst/extdata/DataFiles/Topic06/Topic06.AB.csv", package="ePort"), system.file("inst/extdata/DataFiles/Topic06/Topic06.CD.csv", package="ePort"))
#topic = gsub('.Questions.txt','',gsub('Topic','',basename(key)))
#namelist = list.files(path=dataPath,full.names=TRUE)
#namelist = namelist[grep(paste('Topic',topic,'\\.',sep=''),basename(namelist))]
#namelist

@


\section{Conclusions}

The \pkg{ePort} package offers various plotting tools that can assist those studying genealogical lineages in the data exploration phases. As each plot comes with its advantages and disadvantages, we recommend for users to explore several of the available visualization tools.

This vignette briefly introduced some of the capabilities of the \pkg{ePort} package. Inevitably, new approaches will necessitate new features in subsequent versions and might reveal unforeseen bugs. Please send comments, suggestions, questions, and bug reports to \texttt{amyf@iastate.edu}.

\end{document}
